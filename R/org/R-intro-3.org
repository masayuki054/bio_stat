#+setupfile: info/index-bigblow-header.setup
#+include: info/common-header.org
#+AUTHOR: 鈴木正幸，非常勤講師
#+title: 初心者用 R 言語講座 (2)
#+OPTIONS: tex:t 
#+property: header-args:R :session *bioR* :results output :exports both

#+begin_src R :tangle R-intro/code/0403.R
#+end_src

* 初心者用 R 言語講座 の演習ノート
  [[http://chianti.ucsd.edu/~rsaito/ENTRY1/WEB_RS3/PDF/JPN/Texts/R_Stats2.pdf][初心者用 - R_Stats2.pdf]]

** 4. 簡単なベクトル演算
 既に説明したように、c の直後に括弧の中に入った数字を並べることでベク
 トルを表現することができます。
 (x <- c(2,4,6,8,10)) # 
 length(x) # ベクトルの次元数、すなわちベクトル中の数値の個数
 x[3] # 3 番目の数値を抽出する
 x[c(2,4)] # 2番目と 4 番目の数値を抽出
 x[2:4] # 2 番目から 4 番目までの数値を抽出
 # ベクトルの比較演算 
 x > 5 # ベクトルの各要素が 5 より大きいかの判定
 より大きいか、大きくないかを判定した結果が TRUE, FALSE のベクトル(略
 して T, F)として返ってきます。>1+2 [1] 3 > 3

   > x <- c(2,4,6,8,10) >x
 [1] 2 4 6 8 10 >x>5
 [1] FALSE FALSE TRUE TRUE TRUE >
  which を使うと、何番目が T なのかが返ってきます。返ってきた T, F のベクトルを使っ てさらに which(c(F, F, T, T, T))とするとベクトル(3,4,5)が返ってきますが、一気に which(x > 5)としても同じ答えになります。
 この T, F のベクトルを使って、T の部分だけを抽出することが可能です。 x[ c(F, F, T, T, T)]
 以上をまとめて、x > 5 の要素だけを抽出するには、
 x[ x > 5 ]
 とすることができます。 実は数値だけでなく、文字列もベクトルのように扱うことができて、
 x <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
 とした後、x[2]とすれば 2 番目の文字列”Monday”が取り出されます。文字列のベクトルに 対しても様々な操作が可能で例えば、
 grep(“sd”, x)
 は x の中で”sd”という部分文字列が含まれているのは何番目の要素かをベクトルで返しま す。従って以下のようにすると、”sd”が含まれている文字列を抽出することができます。
 ベクトルの各要素には names を使って名前を付けることができます。例えば、 x <- c(2, 4, 6)
 names(x) <- c("First", "Second", "Third")
   > x <- c(2,4,6,8,10)
 > which(x > 5)
 [1] 3 4 5
 >
            > x <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday") > x[ grep("sd", x) ]
 [1] "Tuesday" "Wednesday" "Thursday"
 >
    4

 とすると、x の names という属性に(“First”, “Second”, “Third”)が付けられ、 x[[ “Second” ]]
 で 2 番目の値が抽出されます。
 さらに数値データのみで構成されるベクトルに対しては様々な統計関数が定義されてい ます。例えば、
 sum(x)
 でベクトル x の合計、
 mean(x)
 で x の平均が求められます。さらに T または F から構成されるベクトル x については sum(x) で T の数を数えるので、
 x <- c(2,4,6,8,10)
 sum(x > 5)
 でベクトル x の要素の中で 5 を超えるものがいくつあるか、すなわち 3 を返します。
 課題 4-1: ベクトル(3, 1, 4, 1, 5, 9, 2, 6, 5)の中で 5 より大きい要素からなるベクトルを作成 しましょう。
 課題 4-2: ベクトル(1,2,3,4,5,6,7,8,9,10,11,12)に(“Jan”, “Feb”, “Mar”, “Apr”, “May”, “Jun”, “Jul”, “Aug”, “Sep”, “Oct”, “Nov”, “Dec”)という名前を付け、”Mar”という文字列を使って 3 番目の要素を取り出してみましょう。
** 5. 簡単な行列の作成と演算
 ベクトルを集めると、rbind を使って行列を作成することが可能です。例えば 1 行目が
 1 2 3 (1,2,3)、2行目が(4,5,6)の行列x=  を作るには、
         456
  
  x <- rbind(c(1,2,3), c(4,5,6))
 とします。その後に x と入力すると、作成した行列が表示されるのが分かります。
 これは、
 x <- matrix(c(1, 4, 2, 5, 3, 6), nrow=2, ncol=3)
  
   > x <- rbind(c(1,2,3), c(4,5,6)) >x
 [,1] [,2] [,3] [1,] 1 2 3 [2,] 4 5 6 >
    5

 または、
 x <- matrix(c(1, 2, 3, 4, 5, 6), nrow=2, ncol=3, byrow=T)
 としても作成可能です。上記は(1, 2, 3, 4, 5, 6)を使って 2 行 3 列の行列を作成する(nrow=2, ncol=3)、その際行から埋めてゆく(byrow=T)、ということを表しています。
 作成した行列 x に対しては様々な演算が可能です。nrow(x), ncol(x)はそれぞれ x の行数 と列数を表します。x + 1 は行列の各要素に 1 を足した答えを返し、x * 2 は各要素を 2 倍 にした答えを返します。行列同士の演算も可能で、y <- rbind(c(2, 4, 6), c(8, 10, 12))とした 後、x + y とすると、行列 x と y の対応する各要素同士を足し合わせた行列が返ってきます。 x * y なら各要素同士を掛け合わせた行列が返ってきます2。
 行列からは任意の行や列を簡単に取り出すことができます。例えば、2行目を取り出し たい場合、
 とします。また、2 列目を取り出したい場合は、
 とします。
 t(x)とすると、行列 x が転置されます(行と列が入れ替わる)。
     > x[2,]
 [1] 4 5 6
 >
    > x[,2] [1] 2 5
    > t(x)
     [,1] [,2]
 [1,] 1 4 [2,] 2 5 [3,] 3 6
  >
  行列 x の各行の平均は以下のように求めることができます3。
 行列 x の各列の平均は以下のように求めることができます。 > apply(x, 2, mean)
 2 行列の積は%*%で計算する。
 3 apply の中の 1 は一次元目の各項番の平均、すなわち各行の平均を計算することを意味す る。同様にして、2 は二次元目の各項番の平均、すなわち各列の値の平均を計算すること を意味する。
  > apply(x, 1, mean)
 [1] 2 5
   6

  [1] 2.5 3.5 4.5
 行列は 2 次元の数値の羅列ですが、R では array(ベクトル、各次元の要素の個数)を使っ てさらに n 次元に拡張された配列を扱うことができます。
 x <- array(1:24, c(3,4,2))
 は 3×4×2 の大きさの3次元配列を作成し、一番目の次元目の値から順番に埋めてゆきま す。
     > x <- array(1:24, c(3,4,2))
 >x
 , , 1 # 3次元目の1番目の3×4配列
 [,1] [,2] [,3] [,4] [1,] 1 4 7 10 [2,] 2 5 8 11 [3,] 3 6 9 12
 , , 2 # 3次元目の2番目の3×4配列
 [,1] [,2] [,3] [,4] [1,] 13 16 19 22 [2,] 14 17 20 23 [3,] 15 18 21 24
 >
  1 3 5 1 2 3
 課題5-1:   を計算しましょう。
 7 9 11 2 4 6
    
 課題5-2: 上記結果に対して行、列それぞれの平均を求めましょう。 

** 6. 簡単なリストの作成 リストは様々な型のデータをひとまとめにして管理できるデータ型です。
  x <- list("Oh", "Nomura", "Kadota")
 は”Oh”、”Nomura”、”Kadota”を要素とするリストを作成します。これらは全て文字列です が、ベクトルを織り交ぜることもできます。
 x <- list("Oh", "Nomura", "Kadota", c(868, 657, 567))
    7

 で最後にベクトル(1, 2, 3)が加わっています。ここから2番目の要素を取り出すためには、
 x[[2]]
 とします。各々の要素に名前を付けることも可能です。
 x <- list(First="Oh", Second="Nomura", Third="Kadota", Home_Runs=c(868, 657, 567))
 として、各々の要素に First, Second, Third, Home_Runs という名前が付いていることを確 認しましょう。
       >x
  $First
 [1] "Oh"
 $Second
 [1] "Nomura"
 $Third
 [1] "Kadota"
 $Home_Runs
 [1] 868 657 567
 >
  名前を使って個々の要素を取り出すためには(例えば2つ目の要素を取り出すには)、 x[["Second"]]
 または
 x$Second
 とします。
 課題 6-1: 名前が Yamagata のベクトル(“Tsuruoka”, “Sakata”, “Yonezawa”)と名前が Niigata のベクトル(“Yuzawa”, “Niitsu”, “Shibata”)を要素にしたようなリストを作成し、そ の中味を表示してみましょう。
      8

** 7. 簡単なデータフレームの作成
 R にはデータフレームと呼ばれる型が存在します。これもリストの一種で、行列と同じ二
 次元配列です。データフレームの各々の行は1つのサンプルに対する観測値、各列はサン プルに対する1つの項目とみなすことができます。これを使うと、表を簡単に表現するこ とができます。以下の表は日本プロ野球の5人の元選手の名前、在籍チーム名、通算打数、 安打数、本塁打数を表したものです。
 Home_Runs 2901 657 3085 504 2543 504 2786 868 2566 567
 row.names = c("Nomura", "Harimoto", "Kinugasa", "Oh", "Kadota"), Team = c("Hawks", "Flyers", "Carps", "Giants", "Hawks"),
 At_Bat = c(10472, 9666, 9404, 9250, 8868),
 Hits = c(2901, 3085, 2543, 2786, 2566),
 Home_Runs = c(657, 504, 504, 868, 567))
 データフレームを作り出す関数 data.frame は data.frame(row.names = 列のラベルのベク トル、列名 1 = ベクトル 1、列名 2 = ベクトル 2, ···)の形式で使うことができます。x の中 味は以下のようになっていることが分かります。
      Team At_Bat Hits Hawks 10472 Flyers 9666 Carps 9404 Giants 9250 Hawks 8868
      Nomura
 Harimoto
 Kinugasa
 Oh
 Kadota これをデータフレームを使って表すと以下のようになります。 x <- data.frame(
                              >x
 Nomura Hawks 10472 2901 657
 Team At_Bat Hits Home_Runs
  Harimoto Flyers 9666 3085 504 Kinugasa Carps 9404 2543 504 Oh Giants 9250 2786 868 Kadota Hawks 8868 2566 567 >
  通常のリストと同様、列名を使って対応するベクトルを抽出することができます。
   > x$Hits
 [1] 2901 3085 2543 2786 2566
 >
  9

 データフレームからは、任意の部分をさらにデータフレームとして抽出することができ ます。例えば 1、5 行目と 2、3、4 列目を抽出する場合、
 x[ c(1,5), c(2,3,4) ]
 とします4。
 データフレームに対してさらに様々な処理が可能です。まずは上記で定義された x にど のような属性があるのか、attributes で調べてみましょう。
     > attributes(x)
  $names
 [1] "Team" "At_Bat" "Hits" "Home_Runs"
 $row.names
 [1] "Nomura" "Harimoto" "Kinugasa" "Oh" "Kadota"
 $class
 [1] "data.frame"
 >
  属性として、names, row.names, class が出てきました。names(x)、row.names(x)、class(x) と入力してみましょう。それぞれ列名、行名、x の型が出てくるでしょう。
 課題 7-1: 下の表は G8 加盟国の国力の一部です。これをデータフレームとして変数にしま しょう5。
     Area
 USA 9.4
 England 0.2 Italy 0.3 Canada 10.0 Germany 0.3 Japan 0.3 France 0.5 Russia 17.1
 Population
 GDP
     315
  62
  60
  34
  82
 127
  62
 141
 14 3 2 2 4 5 3 2
                                  4 x[c("Nomura", "Kadota"),c("At_Bat", "Hits", "Home_Runs")]でも同様に 動作する。
 5 要素が全て数値なので、行列として扱うこともできる。データフレームにしてしまった 変数 x に対しては行列演算ができないことがあるので、その場合は as.matrix(x)で行列に 変換する。
 10

 課題 7-2: 上記で作成したデータフレームより G8 加盟国の国土面積、人口、GDP の平均を それぞれ求めましょう。


