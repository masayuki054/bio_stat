**  12. グラフの作成
 R では簡単にグラフを作成する関数が用意されています。plot 関数は二次元プロットを
 作成することができます。例えば以下のように x 座標と y 座標の値をそれぞれベクトルと して与えると、(1,2), (3,4), (5,9), (7,7), (9,8)の点にプロットを作成できます。
 x <- c(1,3,5,7,9)
 y <- c(2,4,9,7,8)
 plot(x, y, xlab="X Value", ylab="Y Value")
 8 サブルーチンという呼び方がより正確。
 9 f(x=10, y=20)のようにどの引数のどの値を渡すかを明示してもよい。 10 追加引数...の中味は list(...)でリストとして閲覧することが可能。
	15

 xlab, ylabでそれぞれx軸、y軸のラベルを指定しています。
    2468 X Value
 作成されたプロット
 barplot を使うと、棒グラフを作成することができます。以下の例では、各棒の高さに対 応させるベクトルおよびそのラベルを変数 x に与え、barplot(x)を呼び出しています。
 x <- c(1,2,3,2,10,1)
 names(x) <- c("A", "B", "C", "D", "E", "F")
 barplot(x)
      A B C D E F
 作成された棒グラフ
 hist はベクトルで与えられた数値群のヒストグラムを作成する関数です。
 x <- c(3.2, 1.2, 4.2, 2.3, 3.4, 5.9, 5.2, 5.3, 4.1, 5.2, 3.2, 1.4) hist(x, xlab = "Test Value", main = "Test Histogram")
 main によってヒストグラムのタイトルを指定しています。 16
   0 2 4 6 8 10
 Y Value 23456789

 Test Histogram
	123456
 Test Value
 作成されたヒストグラム
 boxplot は複数のベクトル中に含まれる値の分布を表す箱ひげ図を作成します。
 x1 <- c(11,12,11,10,11,11,12,13,15,12,11,10,12,13)
 x2 <- c(20,21,27,9,12,23,23,12,11,9,21,15,7,12,12,9,23,15) boxplot(x1, x2, names=c("Data 1", "Data 2"))
    中央値
 外れ値
 外れ値を除く上位25%
 この範囲に50%の データが分布する
 外れ値を除く下位25%
     作成された箱ひげ図
 課題 12: 課題 7-1 で与えられた表に関して、国土面積と人口の関係をプロットしてみまし ょう。
 17
 Frequency
 01234

**  13. 基本的なプログラミングの構文
 R には他のプログラミングにも存在するような基本的なプログラミングの構文も用意さ
 れています。ここではそれらについてかいつまんで簡単に説明します。
 13.1 if 文
 if 文は与えられた条件11が成立するときのみ、与えられた手続きを実行する構文です。例
 えば x > 0 のときに y を 1 にする、それ以外は y を 0 にするという手続きは if (x > 0){
 y <- 1 } else {
 y <- 0 }
 とします。x = -5 にした後上記を実行し、y の値を調べてみましょう。次に x = 3 にした後 上記を実行し、y の値を調べましょう。
 if 文のより一般的な形式は以下の通りです。 if (条件 1){
 条件 1 が成立したときの手続き
 } else if (条件 2){
 条件 1 が不成立、条件 2 が成立したときの手続き
 } else if(条件 3){
 条件 2 までが不成立、条件 3 が成立したときの手続き
 } else if ...
 :
 } else {
  上記どの条件も成立しなかったときの手続き
 }
 課題 13-1: 入力が 0 のときに 1、それ以外では 0 を返す関数 d を定義しましょう。
 13.2 while 文
 while 文は与えられた条件が成立している間、与えられた手続きを繰り返す構文です。
 while 文の形式は
 11 条件文には&(論理積)や|(論理和)などの論理演算子が使える。
    18

 while(条件){ 条件が成立しているとき、実行する手続き
 }
 です12。例えば x <- 1 とした後、while (x <= 3){ print(x); x <- x + 1 }とすれば、1 から 3 ま
 でが出力されます。
 プログラムとしてファイルに記述するときは、次のように一行一文にした方が見やすい でしょう。
   x <- 1
   while (x <= 3){
 print(x)
 x <- x + 1 }
 ・ 最初に while 文に入ったとき、x は 1 なので、while 文の中の手続きである print(x)(x の値を表示する)が実行され、1 が表示されるとともに x <- x + 1 (x の値を 1 つ増やす)が 実行されます。while 文の最後で x の値は 2 になっています。
 ・ 次の while 文の条件判定において、x は 2 で 3 以下なので、while 文の中の手続きであ る print(x)が実行され、2 が表示されるとともに x <- x + 1 (x の値を 1 つ増やす)が実行さ れます。while 文の最後で x の値は 3 になっています。
 ・ その次の while 文の条件判定において、x は 3 で 3 以下なので、while 文の中の手続き である print(x)が実行され、今回は 3 が表示されるとともに x <- x + 1 (x の値を 1 つ増や
 12 while 文の次の繰り返しを強制的に行う next、while 文から強制的に抜ける break 文な ども用意されている。
   > x <- 1
  > while (x <= 3){ print(x); x <- x + 1 } [1] 1
 [1] 2
 [1] 3
 >
       19

 す)が実行されます。while 文の最後で x の値は 4 になっています。
 ・ その次の while 文の条件判定で x は 4 で 3 以下ではないので、条件に合わず、while 文
 から抜けます。
 課題 13-2: while 文を使って、1,3,5,7,9,11 を1行ずつ表示しましょう。
 13.3 for 文
 for 文も while 文と同じ繰り返しですが、for 文では与えられた要素群の中の要素1つ1
 つを変数に1回ずつ代入しながら繰り返し処理を行います。その形式は、
 for(変数 in 要素群){ 手続き
 }
 です。例えば、for (i in c(1,3,5)){ print(i) }で、1,3,5 が手続き中で使われている変数 i に毎
 回代入され、それが出力されます。for (i in 1:5)){ print(i) }なら、1 から 5 までが変数 i に代
 入され、それが出力されるでしょう。また以下の例は、1 から 5 までの二乗をベクトルにし ます13。
 x <- NULL
 for (i in 1:5){
    x <- append(x, i**2)
 }
 ・ x <- NULL で空のベクトルを x に代入します。NULL は空を意味します。
 ・ for 文で i に 1 から 5 までが順次代入され、代入の度に for 文の中が実行されます。
 ・ for 文の中で i の二乗(i**2)がベクトル x に追加されます。append(x, i)はベクトル x に i
 を追加する関数です14。
 課題 13-3: 課題 12-2 を for 文を使って書き直しましょう。
 13 実は for 文を使わなくても、x <- (1:5)**2 で同じことができる。
 14 x <- c(x, i**2)でも良い。c はベクトルの連結にも使うことができる。
       20

**  14. その他のコマンドや関数
 R でよく使う関数をいくつか挙げておきましょう。

***  14.1 使い方
  ・ help(関数)で関数の詳しい使い方が表示されます。

***   14.2 変数と属性
  ・ ls()または objects()で現在定義されている変数が表示されます。
  ・ class(変数)または mode(変数)でオブジェクトの型(例えば変数が数値なのか、文字なの
  か、リストなのか、行列かなど)を知ることができます。
  ・ attributes(変数)で定義されている属性がリストで返ってきます。

***   14.3 apply 系関数
  ・ apply を使うと、行列の各行または各列に対して同じ処理を繰り返し、結果をベクトル
  で受け取ることができます(5. 簡単な行列の作成と演算参照)。
  ・ sapply を使うと、ベクトルの要素 1 つ 1 つを与えられた関数に入力し、出力結果を 1
  つ 1 つ含んだベクトルとして得ることができます
  func1_sub <- function(elm){ # スカラーelem に対する関数の定義 if(-1 <= elm & elm <= 1){ return (1) } else { return (0) }
  }
  func1 <- function(x){ # ベクトル x を入力とする関数
  return(sapply(x, func1_sub)) }

***   14.4 図の作成
  ・curve 関数で関数のグラフを作成できます。詳しくは help を参照して下さい。 例:
  curve(dnorm, -7, +7) # 正規分布の描画
  curve(cos(x)+cos(2*x), -2*pi, 2*pi, 1000) # 1000はプロット数 curve(func1, -3, 3) # 14.3apply系関数で定義した関数


